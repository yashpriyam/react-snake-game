{"version":3,"sources":["Components/newFood.js","Components/moveSnake.js","Components/gameFinish.js","Components/endGame.jsx","Components/score.jsx","Components/canvas.jsx","App.js","Components/custom-hook.jsx","serviceWorker.js","index.js"],"names":["CANVAS_SIZE","newFood","food","map","_a","i","Math","floor","random","DIRECTIONS","38","39","40","37","moveSnake","setDirection","keyCode","finish","speedState","gameState","EndGame","className","String","fromCodePoint","Number","Score","props","gameScore","Canvas","ref","canvasRef","width","height","initialFoodLocation","round","App","useRef","useState","snake","setSnake","setNewFood","direction","gameOver","setGameOver","speed","setSpeed","callback","delay","savedCallback","useEffect","current","id","setInterval","clearInterval","useInterval","crawling","isHit","piece","snk","some","el","every","val","snakeArrays","JSON","parse","stringify","newSnakeHead","newSnake","nextFood","foodIsGrabbed","pop","ctx","getContext","setTransform","clearRect","window","innerWidth","innerHeight","forEach","x","y","fillStyle","fillRect","beginPath","arc","PI","fill","role","tabIndex","onKeyDown","e","onClick","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.72f97579.chunk.js","sourcesContent":["const CANVAS_SIZE = [460, 460];\n\nexport const SCALE = 20;\nexport const newFood = food =>\nfood.map((_a, i) => Math.floor(Math.random() * (CANVAS_SIZE[i] / SCALE)));","const DIRECTIONS = {\n  38: [0, -1],\n  39: [1, 0],\n  40: [0, 1],\n  37: [-1, 0],\n};\n\nconst moveSnake = ({ keyCode }, setDirection) =>\nkeyCode >= 37 && keyCode <= 40 && setDirection(DIRECTIONS[keyCode]);\n\n\nexport default moveSnake;","const finish = (speedState, gameState) => {\n  speedState(null);\n  gameState(true);\n};\n\nexport default finish;","import React from 'react';\nimport '../App.css'\n\nconst EndGame= () => {\n    return (\n        <div className='end-game'>\n            !!! GAME OVER !!! \n            <h2>{String.fromCodePoint(Number(128542))}</h2>\n        </div>\n    )\n}\n\nexport default EndGame;","import React from 'react';\nimport '../App.css';\n\n\nconst Score = (props) => {\n    return (\n        <div className='score-div'>\n            <h3>{`Your Score: ${props.gameScore}`}</h3>\n        </div>\n    )\n}\n\nexport default Score;","import React from 'react';\nimport '../App.css'\n\nconst Canvas = (props) => {\n    return (\n        <div className='canvas'>\n            <canvas\n            ref={props.canvasRef}\n            width= '460px'\n            height='460px'\n            />\n        </div>\n    )\n}\n\nexport default Canvas;","import React, { useState, useRef, useEffect } from \"react\";\nimport { useInterval } from \"./Components/custom-hook.jsx\";\nimport { SCALE, newFood } from './Components/newFood'\nimport moveSnake from './Components/moveSnake';\nimport finish from './Components/gameFinish';\nimport EndGame from './Components/endGame.jsx';\nimport Score from './Components/score.jsx';\nimport Canvas from './Components/canvas.jsx';\nimport './App.css'\n\n\nconst SPEED = 100;\nconst initialFoodLocation = [Math.round(Math.random()*15), Math.round(Math.random()*15)];\nlet gameScore = 0;\nconst App = () => {\n  const canvasRef = useRef();\n  const [snake, setSnake] = useState([[7, 3], [8, 3], [9, 3]]);\n  const [food, setNewFood] = useState(initialFoodLocation);\n  const [direction, setDirection] = useState([-1, 0]);\n  const [gameOver, setGameOver] = useState(false);\n\n\n  const [speed, setSpeed] = useState(null);\n  useInterval(() => crawling(), speed);\n\n\n  const begin = () => {\n    setSnake([[7, 3], [8, 3], [9, 3]]);\n    setNewFood([Math.round(Math.random()*15), Math.round(Math.random()*15)]);\n    setDirection([0, 1]);\n    setSpeed(SPEED);\n    setGameOver(false);\n    gameScore = 0;\n  };\n\n\n  const isHit = (piece, snk = snake) => {\n    switch(true) {\n      case piece[0] * SCALE >= 460:\n      case piece[0] < 0:\n      case piece[1] * SCALE >= 460:\n      case piece[1] < 0:\n      case snk.some(el => el.every((val, i) => val === piece[i])):\n        return true;\n      default:\n        return false;\n    }\n  };\n\n  const foodIsGrabbed = newSnake => {\n    if (newSnake[0].every((el, i) => el === food[i])) {\n      let nextFood = newFood(food);\n      gameScore += 1;\n      while (isHit(nextFood, newSnake)) {\n        nextFood = newFood(food);\n      }\n      setNewFood(nextFood);\n      return true;\n    }\n    return false;\n  };\n\n  const crawling = () => {\n    let snakeArrays = JSON.parse(JSON.stringify(snake));\n    const newSnakeHead = [snakeArrays[0][0] + direction[0], snakeArrays[0][1] + direction[1]];\n    snakeArrays = [newSnakeHead, ...snakeArrays];\n    if (isHit(newSnakeHead)) finish(setSpeed, setGameOver);\n    if (!foodIsGrabbed(snakeArrays)) snakeArrays.pop();\n    setSnake(snakeArrays);\n  };\n\n  \n  useEffect(() => {\n    const ctx = canvasRef.current.getContext(\"2d\");\n    ctx.setTransform(SCALE, 0, 0, SCALE, 0, 0);\n    ctx.clearRect(0, 0, window.innerWidth, window.innerHeight);\n    snake.forEach(([x, y], i) => {\n      if (i === 0) {\n        ctx.fillStyle = \"red\"\n        ctx.fillRect(x, y, 1, 1)\n      } else if (i === 1 || i === 2) {\n        ctx.fillStyle = \"white\"\n        ctx.fillRect(x, y, 1, 1)\n      } else {\n        ctx.fillStyle = \"black\"\n        ctx.fillRect(x, y, 1, 1)\n      }\n    });\n    ctx.beginPath();\n    ctx.arc(food[0], food[1], 1/2, 0, 2 * Math.PI);\n    ctx.fillStyle = 'black'\n    ctx.fill();\n  }, [snake, food, gameOver]);\n\n  \n  return (\n    <>\n    <h1>Snake Game</h1>\n    <div className='main' role=\"button\" tabIndex=\"0\" onKeyDown={e => moveSnake(e, setDirection)}>\n      <Canvas canvasRef={canvasRef}/>\n      <Score gameScore={gameScore}/>\n      {gameOver && <EndGame/>}\n      <button className='start-button' onClick={begin}>Start Game</button>\n    </div>\n    </>\n  );\n};\n\nexport default App;\n","import { useEffect, useRef } from 'react';\n\nexport function useInterval(callback, delay) {\n  const savedCallback = useRef();\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}